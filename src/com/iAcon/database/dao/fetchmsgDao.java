package com.iAcon.database.dao;

import com.iAcon.database.model.fetchmsg;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table FETCHMSG.
*/
public class fetchmsgDao extends AbstractDao<fetchmsg, Long> {

    public static final String TABLENAME = "FETCHMSG";

    /**
     * Properties of entity fetchmsg.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Msg_id = new Property(1, Long.class, "msg_id", false, "MSG_ID");
        public final static Property From_id = new Property(2, Integer.class, "from_id", false, "FROM_ID");
        public final static Property From_name = new Property(3, String.class, "from_name", false, "FROM_NAME");
        public final static Property From_type = new Property(4, Integer.class, "from_type", false, "FROM_TYPE");
        public final static Property To_id = new Property(5, String.class, "to_id", false, "TO_ID");
        public final static Property Msg_type = new Property(6, Integer.class, "msg_type", false, "MSG_TYPE");
        public final static Property Msg_status = new Property(7, Integer.class, "msg_status", false, "MSG_STATUS");
        public final static Property Msg_content = new Property(8, String.class, "msg_content", false, "MSG_CONTENT");
        public final static Property Create_time = new Property(9, String.class, "create_time", false, "CREATE_TIME");
        public final static Property Ward_id = new Property(10, String.class, "ward_id", false, "WARD_ID");
        public final static Property Type = new Property(11, Integer.class, "type", false, "TYPE");
    };


    public fetchmsgDao(DaoConfig config) {
        super(config);
    }
    
    public fetchmsgDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'FETCHMSG' (" + //
                "'ID' INTEGER PRIMARY KEY ," + // 0: id
                "'MSG_ID' INTEGER," + // 1: msg_id
                "'FROM_ID' INTEGER," + // 2: from_id
                "'FROM_NAME' TEXT," + // 3: from_name
                "'FROM_TYPE' INTEGER," + // 4: from_type
                "'TO_ID' TEXT," + // 5: to_id
                "'MSG_TYPE' INTEGER," + // 6: msg_type
                "'MSG_STATUS' INTEGER," + // 7: msg_status
                "'MSG_CONTENT' TEXT," + // 8: msg_content
                "'CREATE_TIME' TEXT," + // 9: create_time
                "'WARD_ID' TEXT," + // 10: ward_id
                "'TYPE' INTEGER);"); // 11: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FETCHMSG'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, fetchmsg entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long msg_id = entity.getMsg_id();
        if (msg_id != null) {
            stmt.bindLong(2, msg_id);
        }
 
        Integer from_id = entity.getFrom_id();
        if (from_id != null) {
            stmt.bindLong(3, from_id);
        }
 
        String from_name = entity.getFrom_name();
        if (from_name != null) {
            stmt.bindString(4, from_name);
        }
 
        Integer from_type = entity.getFrom_type();
        if (from_type != null) {
            stmt.bindLong(5, from_type);
        }
 
        String to_id = entity.getTo_id();
        if (to_id != null) {
            stmt.bindString(6, to_id);
        }
 
        Integer msg_type = entity.getMsg_type();
        if (msg_type != null) {
            stmt.bindLong(7, msg_type);
        }
 
        Integer msg_status = entity.getMsg_status();
        if (msg_status != null) {
            stmt.bindLong(8, msg_status);
        }
 
        String msg_content = entity.getMsg_content();
        if (msg_content != null) {
            stmt.bindString(9, msg_content);
        }
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(10, create_time);
        }
 
        String ward_id = entity.getWard_id();
        if (ward_id != null) {
            stmt.bindString(11, ward_id);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(12, type);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public fetchmsg readEntity(Cursor cursor, int offset) {
        fetchmsg entity = new fetchmsg( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // msg_id
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // from_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // from_name
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // from_type
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // to_id
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // msg_type
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // msg_status
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // msg_content
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // create_time
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // ward_id
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11) // type
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, fetchmsg entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMsg_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setFrom_id(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setFrom_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFrom_type(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setTo_id(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMsg_type(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setMsg_status(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setMsg_content(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCreate_time(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setWard_id(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setType(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(fetchmsg entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(fetchmsg entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
