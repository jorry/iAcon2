package com.iAcon.database.dao;

import com.iAcon.database.model.BindWardBean;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table BIND_WARD_BEAN.
*/
public class BindWardBeanDao extends AbstractDao<BindWardBean, Long> {

    public static final String TABLENAME = "BIND_WARD_BEAN";

    /**
     * Properties of entity BindWardBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Ward_name = new Property(1, String.class, "ward_name", false, "WARD_NAME");
        public final static Property Ward_id = new Property(2, Integer.class, "ward_id", false, "WARD_ID");
        public final static Property ReleaseSOS = new Property(3, Integer.class, "releaseSOS", false, "RELEASE_SOS");
        public final static Property Status = new Property(4, String.class, "status", false, "STATUS");
        public final static Property Watch_tel_no = new Property(5, String.class, "watch_tel_no", false, "WATCH_TEL_NO");
        public final static Property User_id = new Property(6, String.class, "user_id", false, "USER_ID");
        public final static Property Guard_identity = new Property(7, Integer.class, "guard_identity", false, "GUARD_IDENTITY");
    };


    public BindWardBeanDao(DaoConfig config) {
        super(config);
    }
    
    public BindWardBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'BIND_WARD_BEAN' (" + //
                "'ID' INTEGER PRIMARY KEY ," + // 0: id
                "'WARD_NAME' TEXT," + // 1: ward_name
                "'WARD_ID' INTEGER," + // 2: ward_id
                "'RELEASE_SOS' INTEGER," + // 3: releaseSOS
                "'STATUS' TEXT," + // 4: status
                "'WATCH_TEL_NO' TEXT," + // 5: watch_tel_no
                "'USER_ID' TEXT," + // 6: user_id
                "'GUARD_IDENTITY' INTEGER);"); // 7: guard_identity
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'BIND_WARD_BEAN'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, BindWardBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String ward_name = entity.getWard_name();
        if (ward_name != null) {
            stmt.bindString(2, ward_name);
        }
 
        Integer ward_id = entity.getWard_id();
        if (ward_id != null) {
            stmt.bindLong(3, ward_id);
        }
 
        Integer releaseSOS = entity.getReleaseSOS();
        if (releaseSOS != null) {
            stmt.bindLong(4, releaseSOS);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(5, status);
        }
 
        String watch_tel_no = entity.getWatch_tel_no();
        if (watch_tel_no != null) {
            stmt.bindString(6, watch_tel_no);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(7, user_id);
        }
 
        Integer guard_identity = entity.getGuard_identity();
        if (guard_identity != null) {
            stmt.bindLong(8, guard_identity);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public BindWardBean readEntity(Cursor cursor, int offset) {
        BindWardBean entity = new BindWardBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ward_name
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // ward_id
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // releaseSOS
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // status
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // watch_tel_no
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // user_id
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7) // guard_identity
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, BindWardBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setWard_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWard_id(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setReleaseSOS(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setStatus(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setWatch_tel_no(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUser_id(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setGuard_identity(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(BindWardBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(BindWardBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
